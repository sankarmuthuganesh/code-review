package com.iv.gravity.dao;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.springframework.jdbc.core.RowMapper;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.iv.gravity.constants.GravityTables;
import com.iv.gravity.entity.BlameDetails;
import com.iv.gravity.entity.BugDetails;
import com.iv.gravity.entity.FileUnit;

public class FileUnitMapper implements RowMapper {

   @Override
   public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
      ObjectMapper jsonConvert = new ObjectMapper();
      FileUnit fileDetails = new FileUnit();
      fileDetails.setFileName(rs.getString(GravityTables.COLUMN_FILE_NAME));
      fileDetails.setNatureOfFile(rs.getString(GravityTables.COLUMN_FILE_TYPE));
      fileDetails.setRepository(rs.getString(GravityTables.COLUMN_REPOSITORY_FILE));
      fileDetails.setBranch(rs.getString(GravityTables.COLUMN_BRANCH_FILE));
      fileDetails.setLicenseGroup(rs.getString(GravityTables.COLUMN_LICENSE_GROUP_FILE));
      fileDetails.setLicense(rs.getString(GravityTables.COLUMN_LICENSE_FILE));
      fileDetails.setSubSystem(rs.getString(GravityTables.COLUMN_SUBSYSTEM_FILE));
      fileDetails.setEpicName(rs.getString(GravityTables.COLUMN_EPIC_FILE));
      fileDetails.setRemotePath(rs.getString(GravityTables.COLUMN_REMOTE_PATH));
      fileDetails.setAuthorOfFile(rs.getString(GravityTables.COLUMN_AUTHOR_OF_FILE));
      fileDetails.setNumberOfLines(rs.getInt(GravityTables.COLUMN_NUMBER_OF_LINES));
      fileDetails.setAutogenerated(rs.getBoolean(GravityTables.COLUMN_IS_AUTOGENERATED));
      fileDetails.setTotalBugs(rs.getInt(GravityTables.COLUMN_TOTAL_BUGS_FILE));
      fileDetails.setCriticalBugs(rs.getInt(GravityTables.COLUMN_CRITICAL_BUGS_FILE));
      fileDetails.setMajorBugs(rs.getInt(GravityTables.COLUMN_MAJOR_BUGS_FILE));
      fileDetails.setMinorBugs(rs.getInt(GravityTables.COLUMN_MINOR_BUGS_FILE));
      try {
         fileDetails
            .setBlamesOfTheFile(jsonConvert.readValue(rs.getString(GravityTables.COLUMN_BLAME_DETAILS), new TypeReference<List<BlameDetails>>() {
            }));
      }
      catch (IOException e) {
         // Cannot create java object from json string
      }
      try {
         fileDetails.setBugDetailsList(jsonConvert.readValue(rs.getString(GravityTables.COLUMN_BUG_DETAILS), new TypeReference<List<BugDetails>>() {
         }));
      }
      catch (IOException e) {
         // Cannot create java object from json string
      }
      fileDetails.setFileContents(null);
      return fileDetails;
   }

}
